/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ru.homework.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class DataVLS extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4851105203337413023L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DataVLS\",\"namespace\":\"ru.homework.model\",\"fields\":[{\"name\":\"dateVal\",\"type\":\"string\"},{\"name\":\"timeVal\",\"type\":\"string\"},{\"name\":\"dataList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"DataLST\",\"fields\":[{\"name\":\"val1\",\"type\":\"int\"},{\"name\":\"val2\",\"type\":\"int\"},{\"name\":\"val3\",\"type\":\"int\"},{\"name\":\"val4\",\"type\":\"int\"},{\"name\":\"val5\",\"type\":\"int\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DataVLS> ENCODER =
      new BinaryMessageEncoder<DataVLS>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DataVLS> DECODER =
      new BinaryMessageDecoder<DataVLS>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<DataVLS> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<DataVLS> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<DataVLS>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this DataVLS to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a DataVLS from a ByteBuffer. */
  public static DataVLS fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence dateVal;
  @Deprecated public java.lang.CharSequence timeVal;
  @Deprecated public java.util.List<ru.homework.model.DataLST> dataList;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DataVLS() {}

  /**
   * All-args constructor.
   * @param dateVal The new value for dateVal
   * @param timeVal The new value for timeVal
   * @param dataList The new value for dataList
   */
  public DataVLS(java.lang.CharSequence dateVal, java.lang.CharSequence timeVal, java.util.List<ru.homework.model.DataLST> dataList) {
    this.dateVal = dateVal;
    this.timeVal = timeVal;
    this.dataList = dataList;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return dateVal;
    case 1: return timeVal;
    case 2: return dataList;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: dateVal = (java.lang.CharSequence)value$; break;
    case 1: timeVal = (java.lang.CharSequence)value$; break;
    case 2: dataList = (java.util.List<ru.homework.model.DataLST>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'dateVal' field.
   * @return The value of the 'dateVal' field.
   */
  public java.lang.CharSequence getDateVal() {
    return dateVal;
  }

  /**
   * Sets the value of the 'dateVal' field.
   * @param value the value to set.
   */
  public void setDateVal(java.lang.CharSequence value) {
    this.dateVal = value;
  }

  /**
   * Gets the value of the 'timeVal' field.
   * @return The value of the 'timeVal' field.
   */
  public java.lang.CharSequence getTimeVal() {
    return timeVal;
  }

  /**
   * Sets the value of the 'timeVal' field.
   * @param value the value to set.
   */
  public void setTimeVal(java.lang.CharSequence value) {
    this.timeVal = value;
  }

  /**
   * Gets the value of the 'dataList' field.
   * @return The value of the 'dataList' field.
   */
  public java.util.List<ru.homework.model.DataLST> getDataList() {
    return dataList;
  }

  /**
   * Sets the value of the 'dataList' field.
   * @param value the value to set.
   */
  public void setDataList(java.util.List<ru.homework.model.DataLST> value) {
    this.dataList = value;
  }

  /**
   * Creates a new DataVLS RecordBuilder.
   * @return A new DataVLS RecordBuilder
   */
  public static ru.homework.model.DataVLS.Builder newBuilder() {
    return new ru.homework.model.DataVLS.Builder();
  }

  /**
   * Creates a new DataVLS RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DataVLS RecordBuilder
   */
  public static ru.homework.model.DataVLS.Builder newBuilder(ru.homework.model.DataVLS.Builder other) {
    return new ru.homework.model.DataVLS.Builder(other);
  }

  /**
   * Creates a new DataVLS RecordBuilder by copying an existing DataVLS instance.
   * @param other The existing instance to copy.
   * @return A new DataVLS RecordBuilder
   */
  public static ru.homework.model.DataVLS.Builder newBuilder(ru.homework.model.DataVLS other) {
    return new ru.homework.model.DataVLS.Builder(other);
  }

  /**
   * RecordBuilder for DataVLS instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DataVLS>
    implements org.apache.avro.data.RecordBuilder<DataVLS> {

    private java.lang.CharSequence dateVal;
    private java.lang.CharSequence timeVal;
    private java.util.List<ru.homework.model.DataLST> dataList;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ru.homework.model.DataVLS.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.dateVal)) {
        this.dateVal = data().deepCopy(fields()[0].schema(), other.dateVal);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timeVal)) {
        this.timeVal = data().deepCopy(fields()[1].schema(), other.timeVal);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.dataList)) {
        this.dataList = data().deepCopy(fields()[2].schema(), other.dataList);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing DataVLS instance
     * @param other The existing instance to copy.
     */
    private Builder(ru.homework.model.DataVLS other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.dateVal)) {
        this.dateVal = data().deepCopy(fields()[0].schema(), other.dateVal);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timeVal)) {
        this.timeVal = data().deepCopy(fields()[1].schema(), other.timeVal);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.dataList)) {
        this.dataList = data().deepCopy(fields()[2].schema(), other.dataList);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'dateVal' field.
      * @return The value.
      */
    public java.lang.CharSequence getDateVal() {
      return dateVal;
    }

    /**
      * Sets the value of the 'dateVal' field.
      * @param value The value of 'dateVal'.
      * @return This builder.
      */
    public ru.homework.model.DataVLS.Builder setDateVal(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.dateVal = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'dateVal' field has been set.
      * @return True if the 'dateVal' field has been set, false otherwise.
      */
    public boolean hasDateVal() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'dateVal' field.
      * @return This builder.
      */
    public ru.homework.model.DataVLS.Builder clearDateVal() {
      dateVal = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'timeVal' field.
      * @return The value.
      */
    public java.lang.CharSequence getTimeVal() {
      return timeVal;
    }

    /**
      * Sets the value of the 'timeVal' field.
      * @param value The value of 'timeVal'.
      * @return This builder.
      */
    public ru.homework.model.DataVLS.Builder setTimeVal(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.timeVal = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'timeVal' field has been set.
      * @return True if the 'timeVal' field has been set, false otherwise.
      */
    public boolean hasTimeVal() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'timeVal' field.
      * @return This builder.
      */
    public ru.homework.model.DataVLS.Builder clearTimeVal() {
      timeVal = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'dataList' field.
      * @return The value.
      */
    public java.util.List<ru.homework.model.DataLST> getDataList() {
      return dataList;
    }

    /**
      * Sets the value of the 'dataList' field.
      * @param value The value of 'dataList'.
      * @return This builder.
      */
    public ru.homework.model.DataVLS.Builder setDataList(java.util.List<ru.homework.model.DataLST> value) {
      validate(fields()[2], value);
      this.dataList = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'dataList' field has been set.
      * @return True if the 'dataList' field has been set, false otherwise.
      */
    public boolean hasDataList() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'dataList' field.
      * @return This builder.
      */
    public ru.homework.model.DataVLS.Builder clearDataList() {
      dataList = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DataVLS build() {
      try {
        DataVLS record = new DataVLS();
        record.dateVal = fieldSetFlags()[0] ? this.dateVal : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.timeVal = fieldSetFlags()[1] ? this.timeVal : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.dataList = fieldSetFlags()[2] ? this.dataList : (java.util.List<ru.homework.model.DataLST>) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DataVLS>
    WRITER$ = (org.apache.avro.io.DatumWriter<DataVLS>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DataVLS>
    READER$ = (org.apache.avro.io.DatumReader<DataVLS>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
